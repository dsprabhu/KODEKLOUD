File separation - includes
-----------
playbook.yml
inventory
|
-----inventory
 host_vars
 |
 ---- web1.yml
 ---web2.yml
 ---web3.yml
 group_vars
 |
  ---web_servers

Name the file with the same name as that of the host. (***important)

inventory
---------------
[web_servers]
web1
web2
web3

web1.yml
-------
ansible_host: 172.20.1.100

web2.yml
-------
ansible_host: 172.20.1.101

we3.yml
-------
ansible_host: 172.20.1.102

web_servers.yml
------------
dns_server: 10.1.1.5

include_vars
----------
- name: 
  hosts:
  tasks:
  - include_vars:
    file: /opt/apps/common-data/email/info.yml
    name: email_data

  - mail:
    to: {{email_data.admin_email}}
    subject:
    body:

/opt/apps/common-data/email/info.yml
admin_email: admin@company.com
---
The variables from the file will be loaded into the variable email_data
which can then be used in the form email_data.admin_email.

------
$ ansible-inventory -i inventory/ -y
all:
  children:
    ungrouped: {}
    web_servers:
      hosts:
        web1:
          ansible_hosts: 172.20.1.100
        web2:
          ansible_hosts: 172.20.1.101
------------
playbook.yml
---
- name: 
  hosts: web-db-server
  tasks:
  - name: install mysql package
  - name: start mysql service
  - name: configure database
  - name: install python flask
  - name: run web server
---
tasks/db.yml
  - name: install mysql package
  - name: start mysql service
  - name: configure database

tasks/web.yml
  - name: install python flask
  - name: run web server
---------------------------------------
- name: playbook.yml
  hosts: web-db-server #groupname
  tasks:
    - include_tasks: tasks/db.yml 
    - include_tasks: tasks/web.yml

tasks/db.yml
------
#dont mention hosts
- name: install mysql package
- name: start mysql service
tasks/web.yml
-----
#dont mention hosts
 - name: install python flask
 - name: run web server

I could create new playbooks and include only those tasks that are relevant for me.
playbook-common.yml
- name: Install dependency
  hosts: web-db
  tasks:
    - include_tasks: tasks/common.yml
------------

Let us continue to improve our lamp stack project. Now that we have learned to organize tasks into separate files, let's move the variables to it's respective files. Create a host_vars and group_vars directory and move all variables to them. No variables to be defined in the main inventory file. Only the below parameters are to be configured as host variables. All other parameters are to be configured as group variables for the respective groups:
Host Variables:
ansible_host
ansible_ssh_private_key_file
ansible_user

The inventory file is located at /home/thor/playbooks/lamp-stack-playbooks/inventory. You may edit its contents but not its filename or location.

[thor@ansible-controller lamp-stack-playbooks]$ cat inventory 
[db_servers]
lamp-db ansible_host=172.20.1.101 ansible_ssh_private_key_file=/home/thor/.ssh/maria ansible_user=maria mysqlservice=mysqld mysql_port=3306 dbname=ecomdb dbuser=ecomuser dbpassword=ecompassword

[web_servers]
lampweb ansible_host=172.20.1.100 ansible_ssh_private_key_file=/home/thor/.ssh/john ansible_user=john httpd_port=80 repository=https://github.com/kodekloudhub/learning-app-ecommerce.git

-----
Let's move the tasks to 3 separate files under the tasks directory. Create 3 files common.yml, db.yml and web.yml and move the associated tasks into each of them. Then include the tasks in the main playbook.


Do not modify the tasks or task names. Only move them to the respective files
---
TASK [include_tasks] ******************************************************************************************
fatal: [lampweb]: FAILED! => {"reason": "no action detected in task. This often indicates a misspelled module name, or incorrect module path.\n\nThe error appears to have been in '/home/thor/playbooks/lamp-stack-playbooks/tasks/common.yml': line 2, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n---\n- name: Deploy lamp stack application\n  ^ here\n"}
fatal: [lamp-db]: FAILED! => {"reason": "no action detected in task. This often indicates a misspelled module name, or incorrect module path.\n\nThe error appears to have been in '/home/thor/playbooks/lamp-stack-playbooks/tasks/common.yml': line 2, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n---\n- name: Deploy lamp stack application\n  ^ here\n"}

----------
1) Let us continue to improve our lamp stack project. Now that we have learned to organize tasks into separate files, let's move the variables to it's respective files. Create a host_vars and group_vars directory and move all variables to them. No variables to be defined in the main inventory file. Only the below parameters are to be configured as host variables. All other parameters are to be configured as group variables for the respective groups:

Host Variables:

ansible_host

ansible_ssh_private_key_file

ansible_user


The inventory file is located at /home/thor/playbooks/lamp-stack-playbooks/inventory. You may edit its contents but not its filename or location.


 mkdir host_vars group_var
 touch host_vars/lamp-db.yml
 touch host_vars/lampweb.yml
 touch group_vars/db_servers.yml
 touch group_vars/web_servers.yml


2) Let's move the tasks to 3 separate files under the tasks directory. Create 3 files common.yml, db.yml and web.yml and move the associated tasks into each of them. Then include the tasks in the main playbook.
Do not modify the tasks or task names. Only move them to the respective files
mkdir tasks
vi tasks/common.yml
- name: Install common dependencies
  yum:
    name:
      - libselinux-python
      - libsemanage-python
      - firewalld

vi tasks/db.yml
- name: Install MariaDB package
  yum:
    name:
      - mariadb-server
      - MySQL-python
    state: installed

- name: Create Mysql configuration file
  template: src=templates/my.cnf.j2 dest=/etc/my.cnf

- name: Start MariaDB Service
  service: name=mariadb state=started enabled=yes

- name: Start firewalld
  service: name=firewalld state=started enabled=yes

- name: insert firewalld rule
  firewalld: port={{ mysql_port }}/tcp permanent=true state=enabled immediate=yes

- name: Create Application Database
  mysql_db: name={{ dbname }} state=present

- name: gather facts from lampweb
  setup:
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items: "{{ hostvars[groups['web_servers'][0]].groups.web_servers }}"

- name: Create Application DB User
  mysql_user: name={{ dbuser }} password={{ dbpassword }} priv=*.*:ALL host={{ hostvars['lampweb']['ansible_facts']['eth0']['ipv4']['address'] }} state=present

- name: Move db-load-script to db host
  template:
    src: templates/db-load-script.sql.j2
    dest: /tmp/db-load-script.sql

- name: Load Inventory Data
  shell: mysql -f < /tmp/db-load-script.sql

vi tasks/web.yml
Add below given content

- name: Install httpd and php
  yum:
    name:
      - httpd
      - php
      - php-mysql
    state: present

- name: Install web role specific dependencies
  yum: name=git state=installed

- name: Start firewalld
  service: name=firewalld state=started enabled=yes

- name: insert firewalld rule for httpd
  firewalld: port={{ httpd_port }}/tcp permanent=true state=enabled immediate=yes

- name: Set index.php as the default page
  tags: "Set index.php as the default page"
  replace:
    path: /etc/httpd/conf/httpd.conf
    regexp: 'DirectoryIndex index.html'
    replace: 'DirectoryIndex index.php'

- name: http service state
  service: name=httpd state=started enabled=yes

- name: Copy the code from repository
  git: repo={{ repository }} dest=/var/www/html/  force=yes

- name: Creates the index.php file
  template: src=templates/index.php.j2 dest=/var/www/html/index.p

3) If not done already include the tasks in the main deploy-lamp-stack.yml
vi deploy-lamp-stack.yml
--

- name: Deploy lamp stack application
  hosts: all
  become: yes
  tasks:
    - include_tasks: tasks/common.yml

    # Install and Configure Database
- name: Deploy lamp stack application
  hosts: lamp-db
  gather_facts: yes
  become: yes
  tasks:
    - include_tasks: tasks/db.yml

- name: Deploy lamp stack application
  hosts: lampweb
  gather_facts: yes
  become: yes
  tasks:
    - include_tasks: tasks/web.yml
------------------------
templates/cat db-load-script.sql.j2
USE {{ dbname }};
CREATE TABLE products (id mediumint(8) unsigned NOT NULL auto_increment,Name varchar(255) default NULL,Price varchar(255) default NULL, ImageUrl varchar(255) default NULL,PRIMARY KEY (id)) AUTO_INCREMENT=1;
INSERT INTO products (Name,Price,ImageUrl) VALUES ("Laptop","100","c-1.png"),("Drone","200","c-2.png"),("VR","300","c-3.png"),("Tablet","50","c-5.png"),("Watch","90","c-6.png"),("Phone Covers","20","c-7.png"),("Phone","80","c-8.png"),("Laptop","150","c-4.png");

templates/cat my.cnf.j2 
[mysqld]
innodb-buffer-pool-size=5242880
# datadir=/var/lib/mysql
# socket=/var/lib/mysql/mysql.sock
user=mysql
# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0
port={{ mysql_port }}
---------------------------------------------------------------------------------------

$ ansible-galaxy init mysql

my-playbooks
 |
 --playbook.yml 
 --inventory
 --- roles
       |
       mysql
         |
         -------README.md
         -------templates
         -------tasks
         -------handleres
         -------vars
         -------defaults
         -------meta
------------------------------
$ ansible-galaxy search mysql
$ ansible-galaxy list
$ ansible-config dump | grep ROLE
$ ansible-galaxy install geerlingguy.mysql
$ ansible-galaxy install geerlingguy.mysql -p ./roles
playbook.yml
---
- name: install and configure MySQL
  hosts: db-server
  roles:
    - role: geerlingguy.mysql
      become: yes
      vars:
        mysql_user_name: db-user
-------

1) Let's start using roles. In the ~/playbooks/db directory we are attempting to configure mysql on a database server. A partially developed playbook is available. We have planned to use a role in the playbook.
First, install the kodekloud1.mysql role on the ansible controller.

ansible-galaxy install kodekloud1.mysql
ansible-config dump | grep ROLE

2)Update the playbook to use the newly created role to configure the database server.

deploy_db.yml
- name: Deploy MySQL Server
  hosts: db_server
  roles:
    - role: kodekloud1.mysq

3) Let's configure a web server now. Navigate to the web directory. Install the geerlingguy.nginx role inside roles directory within the web directory.
ansible-galaxy install geerlingguy.nginx -p roles

4) Update the playbook to use the role geerlingguy.nginx to install nginx web server
Pass in an additional parameter to the role to NOT configure the service to be enabled at startup. Use the parameter nginx_service_enabled. Check roles/geerlingguy.nginx/defaults/main.yml for more details.
---
- name: Deploy Web Server
  hosts: web_server
  roles:
    - name: geerlingguy.nginx
      vars:
        nginx_service_enabled: no
        


















