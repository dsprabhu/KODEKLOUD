Blocks

---
- hosts: server1
  tasks:
    - block:
        - name: Install mysql
          yum:
            name: mysql-server
            state: present
        -  name: start mysql service
           service:
             name: mysql-server
             state: started
      become_user: db-become_user
      when: ansible_facts['distribution'] == 'CentOS'
      rescue:
        - mail:
            to: admin@company.com
            subject: Installation failed
            body: DB install failed at {{ansible_failed_task.name}}

      always:
        - mail:
            to: admin@company.com
            subject: Iinstallation status
            body: DB install status - {{ansible_failed_result}}
-------------------------------------------------------------------

     We have three web nodes that are managed by Ansible. There is an inventory file ~/playbooks/inventory on Ansible controller which has all these three nodes added. Create a playbook ~/playbooks/blocks.yml on Ansible controller to install httpd web server and start its service. We need the tasks to be run only on CentOS based web nodes.

     Create the playbook using blocks to logically group the tasks (installation and service start) so that even if we run playbook for all hosts that are in inventory, the tasks are run only on CentOS based nodes.

     ---
- hosts: all
  tasks:
    - block:
        - name: Install httpd
          yum:
            name: httpd
            state: present

        -  name: start httpd service
           service:
             name: httpd
             state: started
      become: yes
      when: ansible_facts['distribution'] == 'CentOS
-----------------
---
- hosts: all
  tasks:
    - block:
        - name: Install httpd
          yum:
            name: httpd
            state: present

        -  name: start httpd service
           service:
             name: httpd
             state: started
      become: yes
      when: ansible_facts['distribution'] == 'CentOS'

      rescue:
        - debug:
            msg: "Playbook has failed for {{inventory_hostname}}"
----------------------------------------------
We just created a new playbook at ~/playbooks/blocks_always.yml. 
This playbook creates a file on all web nodes and performs some tasks on them. 
The last task that prints This task always runs! must always run.
 However, the playbook fails at the second task and as a result the third and fourth task does not run. We do not need to fix the second task for now, but by using always section we want the last task to always run regardless of status of other tasks before it.
Add an always section and configure the last task to always run. Do not modify any other task.
---
- hosts: all
  tasks:
    - name: Create a file
      block:
        - file:
            path: /tmp/file.txt
            state: touch

        - name: This will fail
          command: /bin/false

        - debug:
            msg: "This will never run"

      always:
        - debug:
            msg: "This task always runs!"
----------------------------
Error Handling - Task failure

any_errors_fatal: true
---------------
- name:
  hosts:
  any_errors_fatal: true

The fist two task complete and failed in 3rd task it just fails and exits the playbook at that point.
In multiple server case , playbook exit from failed server so the remain servers will be completed.
if we want to stop execution even one of the servers failed, add an option any errors
fatal and set its value to true. This way, if any task fails on one server, Ansible stops
execution of the entire playbook and exits.

max_fail_percentage:30
----------
- name:
  hosts:
  max_fail_percentage:30

But the same time I don't want to end up with just 2 out of the 100 servers being configued.
If many of them are failing, then there's something seriouly wrong that i need to take a lookup.
in such case , i need to put a condition. if more that 30% of the servers fail at a particular task,
and I want to stop. so I can use max fail percentage option.
------
ignore_errors

The playbook execution will not stop and fail instead it will ignore and countinue.
----------------------------------------
failed_when
------
- command: cat /var/log/server.log
  register: command_output
  failed_when: 'ERROR' in command_output.stdout

Want to store the logs in the server.log file. We would like to check for errors in the file.
if there are any errors in that file, we would like to fail the playbook.
for this we would execute cat var/log/server.log command. This command returs the contens of the log file.
As long as the file is present and it is readable the task will complete successfully.
however we would like to fail it if it has error messages in it.
------------------------------------------