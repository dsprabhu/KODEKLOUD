Loops.yml
   ---
       - name: install packages in loops
         hosts: all 
         vars:
           packages:
             - name: nginx
               required: true
             - name: mysql
               required: true
             - name: apache
               required: false

      tasks:
        - name: Install "{{ item.name }}" on Debain
          apt:
            name: "{{ item.name }}"
            state: present
          when: item.required == true
          loop: "{{ packages }}"
  ---
  -----------------------------
  The below is explan about the above play book loops.yml

  ---
       - name: install packages in loops
         hosts: all 
         vars:
           packages:
             - name: nginx
               required: true
         tasks:
           - apt:
               name: "{{item.name}}"
               state: present
             when:  item.required == true
  ---
       - name: install packages in loops
         hosts: all 
         vars:
           packages:
             - name: mysql
               required: true
         tasks:
           - apt:
               name: "{{item.name}}"
               state: present
             when:  item.required == true
  ---
       - name: install packages in loops
         hosts: all 
         vars:
           packages:
             - name: apache
               required: true
         tasks:
           - apt:
               name: "{{item.name}}"
               state: present
             when:  item.required == true
---------------------------------------------------------
---
- name: Check status of a service and email if its download
hosts: localhost
tasks:
  - command: service httpd status
    register: result

  - mail:
      to: admin@compay.com
      subject: Service Alert
      body: HTTPD service is download
    when: result.stdout.find('down') != -1

---------------
---
- name: Install apache
  hosts: all
  tasks:
    # your code goes here...
    - name: install apache2 in ubuntu server
      apt:
        name: apache2
        state: present
      when: ansible_distribution == "Ubuntu"

    - name: install httpd in centos 
      yum:
        name: httpd
        state: present
      when: ansible_distribution == "CentOS"
----------------       

---
- hosts: web2
  gather_facts: false
  tasks:
    - shell: dpkg -l git
      register: check_if_git_installed
      ignore_errors: true

    - debug: var=check_if_git_installed
    - shell: echo 'Oops, git is missing' > /tmp/is_git_installed.txt
      when: check_if_git_installed.rc != 0

    - shell: git --version > /tmp/is_git_installed.txt
      when: check_if_git_installed.rc == 0
      -----
---
---
- name: git package verification
  hosts: web2
  gather_facts: true
  tasks:
    - name: create a file
      file:
        path: /tmp/is_git_installed.txt
        state: touch

    - name: get the rpm package facts
      package_facts:
        manager: "auto"

    - name: git not present
      copy:
        content: "Oops, git is missing"
        dest: /tmp/is_git_installed.txt
      when: "'git' not in ansible_facts.packages"
      ignore_errors: true

    - name: git present
      debug: 
        msg: "{{ansible_facts.packages['git'][0].version}}"
      when: "'git' in ansible_facts.packages"
      register: git_register

    - name: git present
      copy:
        content: "{{git_register}}"
        dest: /tmp/is_git_installed.txt
      when: "'git' in ansible_facts.packages"

-----------------------------
---
- hosts: web2
  gather_facts: false
  tasks:
    - shell: dpkg -l git
      register: check_if_git_installed
      ignore_errors: true

    - debug: var=check_if_git_installed
    - shell: echo 'Oops, git is missing' > /tmp/is_git_installed.txt
      when: check_if_git_installed.rc != 0

    - shell: git --version > /tmp/is_git_installed.txt
      when: check_if_git_installed.rc == 0
---------------------
---
- name: copy script if not present
  gather_facts: yes
  hosts: web2
  vars:
    remote_dest: /usr/local/bin/report_status.sh
  tasks:
    - copy:
        src: report_status.sh
        dest: "{{remote_dest}}"
      when: copy_file_only_if is defined and copy_file_only_if|bool

----------------
when: ansible_facts['os_family'] == "Ubuntu"
when: (ansible_distribution == "Debian" ) or (ansible_distribution == "Ubuntu")
when: (ansible_facts['os_family'] == 'Debian') and ('"nginx/1.8.0" not in currentNginxVersion.stdout')
when: (reboot_file.stat.exists) and (inventory_hostname == 'aws-proxy-server')
ansible_distribution == 'Ubuntu' and ansible_distribution_version|version_compare('15.04', '>=')
---------------------------------------------------
      when:
        - ansible_facts['distribution'] == "CentOS"
        - ansible_facts['distribution_major_version'] == "6"
----------------
ansible.builtin.command: ls /etc/hosts
        register: contents1
ansible.builtin.command: ls /home/ubuntu/hello
        register: contents2
ansible.builtin.debug:
          msg: "Directory is empty"
        when: contents1.stdout == "" or contents2.stdout == ""
-----------------------
- name: Check empty directory
win_shell: dir {{ dirpath}}
register: checkdir

ansible.builtin.debug:
msg: "{{ dirpath }} folder does not exist"
when: checkdir is failed
--------
- service:
        name: apache2
        state: restarted
      when: webservers in group_names
-----------------------------------
      Help your friend fix this playbook /home/thor/playbooks/copy_file_only_if.yml.


Your firend is trying to copy this script /home/thor/playbooks/report_status.sh to web2 at location /usr/local/bin/report_status.sh based on a condition: if variable copy_file_only_if=true.

Problem is: Even though (s)he is passing True or true the boolean variable set this way is being evaulated as string and the conditional is being skipped as Conditional result was False

Please use the inventory file 

---
- name: copy script if not present
  gather_facts: yes
  hosts: web2
  vars:
    remote_dest: /usr/local/bin/report_status.sh
  tasks:
    - copy:
        src: report_status.sh
        dest: "{{remote_dest}}"
      when: copy_file_only_if is defined and copy_file_only_if|bool
      ###......................................problem is here ^
      ### modify this so copy_file_only_if is evaluated as boolean.

ansible-playbook copy_file_only_if.yml -e copy_file_only_if=true -i inventory -v
---------------------------
------------
You can cast values as certain types. For example, if you expect the input “True” from a vars_prompt and you want Ansible to recognize it as a boolean value instead of a string:

- ansible.builtin.debug:
     msg: test
  when: some_string_value | bool

If you want to perform a mathematical comparison on a fact and you want Ansible to recognize it as an integer instead of a string:

- shell: echo "only on Red Hat 6, derivatives, and later"
  when: ansible_facts['os_family'] == "RedHat" and ansible_facts['lsb']['major_release'] | int >= 6
----------
Check if report_status.sh copied earlier to web2 remote host is executable or not.
If it is not executable, log the message: File report_status.sh is not executable, making it executable... in file /tmp/change.log on web2 remote host and make it executable.


Develop a playbook /home/thor/playbooks/make_it_executable.yml and use the inventory file /home/thor/playbooks/inventory

---
- hosts: web2
  gather_facts: yes
  vars:
    remote_dest: /usr/local/bin/report_status.sh
  tasks:
    - stat:
        path: "{{remote_dest}}"
      register: file_status
 
    - debug:
        msg: "{{file_status.stat.mode}}"
    
    - copy:
        content: "File report_status.sh is not executable, making it executable..."
        dest: /tmp/change.log
      when: file_status.stat.mode != 0755

    - name: Make the script executable
      file:
        path: "{{remote_dest}}"
        mode: '0755'
      when: file_status.stat.executable == false
      ------------------------------
The script report_status.sh executes a command to test if you are still vulnerable to Shellshock Vulnerability.
The script outputs vulnerable if you are still vulnerable else echos not vulnerable. Note: You don't need to modify anything on the script.

Write a playbook /home/thor/playbooks/check_if_vulnerable.yml and execute that script report_status.sh you copied earlier to test if you are vulnerable. If you are still vulnerable add a play to update package bash to the latest version.
Use inventory /home/thor/playbooks/inventory.

---
- hosts: web2
  gather_facts: no
  vars:
    remote_dest: /usr/local/bin/report_status.sh
  tasks:
    - stat:
        path: "{{remote_dest}}"
      register: file_status

    - debug: var=file_status
    - shell: echo "File report_status.sh is not executable, making it executable..." > /tmp/change.log
      when: file_status.stat.exists and file_status.stat.executable == false

    - name: Make the script executable
      file:
        path: "{{remote_dest}}"
        mode: 0775
-----------------------------------------------
- hosts: web2
  gather_facts: no
  tasks:
    - shell: "sh /usr/local/bin/report_status.sh"
      register: script_status

    - debug: var=script_status

------------------------------
Develop a playbook - /home/thor/playbooks/install_packages.yml - to install an extra package htop on web2 node. The package name htop must be passed as a value to a variable extra_packages with the -e option in the command line while running the playbook. The playbook install_packages.yml already has some exiting code, modify the task install extra packages so that it only runs if extra_packages variable is defined and it has value htop. At the end playbook must be able to install this extra package on web2 node while passing correct values in the extra vars i.e -e.


Use inventory from /home/thor/playbooks/inventory.

---
- hosts: web2
  gather_facts: no
  tasks:
    - name: install nginx
      apt: name=nginx state=present
      tags: [install_core]

    - name: install extra packages
      apt: name={{item}}
      with_items: "{{extra_packages}}"
      when: extra_packages is defined and extra_packages == "htop"
-------------------------------