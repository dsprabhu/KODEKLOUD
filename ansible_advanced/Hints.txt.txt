Playbook Execution
ansible-playbook.yml --check
ansible-playbook.yml --start-at-task "Start httpd service"
ansible-playbook.yml --tags "install"
ansible-playbook.yml --skip-tags "install"


---
- debug:
    var: ansible_facts

- debug:
    msg: "This is a debug message"

----
/etc/ansible/ansible.cfg
gathering = implicit (gather by default gather_facts=true)
gatthering = explicit ( do not gather by default)
----
ansible web1 -i inventory -m setup |grep  "distribution"
------------
/etc/ansible/ansible.cfg
[defaults]
inventory = /etc/ansible/hosts
log_path = /var/log/ansible.log
library=/user/share/my_module/
roles_path=/etc/ansible/roles
action_plugins=/usr/share/ansible/plugins/action
gathering=implicit or ANSIBLE_GATHERING=explicit (environment variable)
#ssh timeout
timeout=20
forks=5
[inventory]
enable_plugins = host_list, virtualbox, yaml, constructed
[privilege_escalation]
[paramiko_connection]
[ssh_connection]
[presistent_connection]
[colors]
-----------
/opt/web-playbooks/ansible.cfg,/opt/db-playbooks/ansible.cfg,/opt/network-playbooks/ansible.cfg,
$ANSIBLE_CONFIG=/opt/ansible-web.cfg ansible-playbook playbook.yml (single playbook execution)
$export ANSIBLE_CONFIG=/opt/ansible-web.cfg (entire session)
periority 1) environment variable (ex ANSIBLE_CONFIG) $ANSIBLE_CONFIG=/opt/ansible-web.cfg
periority 2) diffrent ansible.cfg file /opt/web-playbooks, /opt/db-playbooks
periority 3) /etc/ansible/ansible.cfg
-----
Gathering facts
ansible-config list # list all configurations
ansible-config view # show the current config file
ansible-config dump # shows the current settings
ansible-config dump|grep GATHERING
	DEFAULT_GATHERING(env:ANSIBLE_GATHERING)=explicit


-------------
Ansible installation
Install pip if not present
yum install epel-release python-pip
install ansible using pip
pip install ansible
pip install --upgrade ansible
pip install ansible==2.4
-----------
Key Authendication
ssh-copy-id -i privatekey user@servera
ansible_ssh_private_key_file=/some-path/private-key
ansibe_user
ssh-keygen -f ~/.ssh/ansible
ssh-copy-id -i ansible.pub ansible@web1
---
Privilage Escalation
ansible -a 'cat /etc/hosts' all
export ANSIBLE_GATHERING=explicit ansible-playbook playbook.yml
lamp-dev1 ansible_host=172.20.1.100 ansible_user=admin ansible_become=yes ansible_become_user=root
become: yes
become_method:sudo,pfexec,doas,ksu,runas
become_user: root
To change the login shell for a remote user while running an Ansible task - become_flags
ansible web1 -i inventory -m shell -a ' ls -l /home/admin/test.txt' --become --become-method=sudo
ansible all -m ping --ask-become-pass
--------
FAQ
"{{ }}" - should use for variables
var: dns_server_ip - should not use "{{}}"
when: ansible_host != 'web' - should not use "{{}}"
with_items: "{{ }}" - should use for loops
ansible_ssh_pass - old way of using method
ansible_password - new way of using method
--------------
LAB - 
ssh-keygen -f ~/.ssh/john
ssh-keygen -f ~/.ssh/maria
ssh-copy-id -i john.pub john@lamp-web
ssh-copy-id -i maria.pub maria@lamp-db
# Inventory File
[web_servers]
lamp-web ansible_host=172.20.1.100 ansible_user=john ansible_ssh_private_key_file=/home/thor/.ssh/john

[web_servers:vars]
httpd_port=80
repository=https://github.com/kodekloudhub/learning-app-ecommerce.git

[db_servers]
lamp-db ansible_host=172.20.1.101 ansible_user=maria ansible_ssh_private_key_file=/home/thor/.ssh/maria

[db_servers:vars]
mysqlservice=mysqld
mysql_port=3306
dbname=ecomdb
dbuser=ecomuser
dbpassword=ecompassword
---------
Additional modules
- package:
    name: httpd 
---------
 firewalld:
        source: 172.20.1.101
        zone: internal
        state: enabled
        permanent: yes
        immediate: yes
    -----------
    - name: add additinal condent
      blockinfile:
        path: /var/www/html/index.html
        insertafter: BOF
        owner: apache
        group: apache
        content: |
           Welcome to KodeKloud!
           This is Ansible Lab.
           ------
           ---
- name: replace port 80 to 8080
  hosts: web1
  tasks:
  - replace:
      path: /etc/httpd/conf/httpd.conf
      regexp: 'Listen 80'
      replace: 'Listen 8080'
  - service: name=httpd state=restarted 
  ---
- hosts: web1
  tasks:
    - name: install nginx
      yum:
        name: nginx
        state: latest

    - name: start service
      service: 
        name: nginx
        state: started
        enabled: yes

    - name: unarchive
      unarchive:
        src: /root/nginx.zip
        dest: /usr/share/nginx/html
        remote_src: yes

    - name: replace module
      replace:
        path: /usr/share/nginx/html/index.html
        regexp: "This is sample html code"
        replace: "This is KodeKloud Ansible lab"

---
---
- hosts: node00
  tasks:
    - name: cron job
      cron:
        name: Free Memory Check
        minute: "0"
        hour: "*/2"
        job: sh /root/free.sh

---
- hosts: node00
  tasks:
    - name: cron job
      cron:
        name: yum update
        cron_file: /etc/cron.d/ansible_yum
        minute: "05"
        hour: "8"
        weekday: "0"
        user: root
        job: "yum -y update"
        cron_file: ansible_yum
---------------
   when: ansible_facts['distribution'] == "CentOS" and "RedHat"
ansible_facts['distribution_major_version'] == "7" 
----
single node and multinode (MariaDB -172.20.1.101 , httpd and PHP - 172.20.1.101)
identify system (linux centos)
install firewall (install, start service ,immediate)
-
install httpd php php-mysql
configure firewall (firewall-cmd --permanent --zone=public --add-port=80\tcp,reload)
configure httpd (vi /etc/httpd/conf/httpd.conf # configure directoryindex to use index.php instead of index.html)
start httpd and enable it.
-
install MariaDB-server
configure MariaDB (vi /etc/my.cnf #configure the file with right port)
start MariaDB and enable
configure firewall (firewall-cmd --permanent --zone=public --add-port=3306\tcp,reload firewall)
configure database
load data
(firewall-cmd --list)
-
install Php
download code
test
-
/etc/my.cnf
--
single node deployment
$mysql
MariaDB > CREATE DATABASE ecomdb;
MariaDB > CREATE USER 'ecomuser'@'localhost' IDENTIFIED BY 'ecompasspassword';
MariaDB > GRANT ALL PRIVILEGES ON *.* TO 'ecomuser'@'localhost';
MariaDB > FLUSH PRIVILEGES;
$mysql < db-load-script.sql

multinode deployment
$mysql
MariaDB > CREATE DATABASE ecomdb;
MariaDB > CREATE USER 'ecomuser'@'172.20.102' IDENTIFIED BY 'ecompasspassword';
MariaDB > GRANT ALL PRIVILEGES ON *.* TO 'ecomuser'@'172.20.102';
MariaDB > FLUSH PRIVILEGES;
$mysql < db-load-script.sql (https://github.com/kodekloudhub/learning-app-ecommerce/blob/master/assets/db-load-script.sql)

----
yum install -y git
git clone https://github.com/<application>.git /var/www/html/
#update index.php to use the right database address,name and credentials
curl https://localhost
--
Multinode index.php on webserver
<?php
  $link = mysqli_connect('172.20.1.101', 'ecomuser', 'ecompassword', ecomdb);

  if ($link) {
  $res = mysqli_query($link, "select * from products;");
  while ($row = mysqli_fetch_assoc($res)) { ?>
----
katacoda.com
https://github.com/kodekloudhub/learning-app-ecommerce.git

ansible all -i inventory -m shell -a 'hostname'


- name: Create Application Database
      mysql_db: name={{ dbname }} state=present

    - name: Create Application DB User
      mysql_user: name={{ dbuser }} password={{ dbpassword }} priv=*.*:ALL host='172.20.1.100' state=present
-------------------------------------------------
---
- name: useraddition
  hosts: localhost
  gather_facts: false
  become: yes
  tasks:
    - ansible.builtin.include_vars:
        file: users.yml

    - ansible.builtin.debug:
        msg: "{{admins.0, admins.1, admins.2}}"

    - name: userdeletion from admins and developers group
      ansible.builtin.user:
        name: "{{item}}"
        state: absent
      with_items:
        - "{{ admins }}"
        - "{{ developers }}"
-----------------------------------
---
- name: useraddition
  hosts: localhost
  gather_facts: false
  become: yes
  tasks:
    - ansible.builtin.include_vars:
        file: users.yml

    - ansible.group
        name: "{{item}}"
        state: present
      loop:
        - admins
        - developers

    - name: userdeletion from admins and developers group
      ansible.builtin.user:
        name: "{{item}}"
        group: admins
        password: "{{ 'adm$n$' | password_hash('sha512') }}"
        state: absent
      with_items:
        - "{{admins}}"

    - name: userdeletion from admins and developers group
      user:
        name: "{{item}}"
        group: developers
        home: /var/www
        password: "{{ 'd3v3l0p3r' | password_hash('sha512') }}"
        state: absent
      with_items:
        - "{{developers}}"

     - name: add users to sudo wheel
       sudoers:
         name: wheel
         user: "{{item}}"
       with_item:
         - "{{admins}}"

